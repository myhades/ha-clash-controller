{
    "title": "Clash 控制器",
    "config": {
        "step": {
            "user": {
                "title": "Clash 控制器设置",
                "data": {
                    "api_url": "API 地址",
                    "bearer_token": "令牌",
                    "use_ssl": "使用 HTTPS",
                    "allow_unsafe": "允许不安全的 SSL 证书"
                },
                "description": "请输入您的 Clash 实例的 API 地址和令牌。例如：192.168.1.1:9090，clash.mydomain.com。如果地址是 IP，请确保其为静态地址。"
            }
        },        
        "error": {
            "cannot_connect": "无法连接到 API，请验证地址后重试。",
            "invalid_token": "提供的 API 令牌无效，请检查后重试。",
            "unknown": "发生意外错误，请稍后重试。",
            "timed_out": "API 连接超时， Clash 是否在运行？"
        },
        "abort": {
            "already_configured": "此位置的实例已添加，请使用配置按钮更新令牌并修改设置。"
        }
    },
    "options": {
        "step": {
            "init": {
                "description": "修改此条目的选项。检测流媒体服务可用性时，Home Assistant 必须通过同一代理进行连接。",
                "title": "Clash 控制器选项",
                "data": {
                    "scan_interval": "扫描间隔（秒）",
                    "concurrent_connections": "并发连接数",
                    "bearer_token": "更新令牌（留空则跳过）",
                    "streaming_detection": "流媒体可用性检测"
                }
            }
        },        
        "error": {
            "invalid_token": "提供的 API 令牌无效，请检查后重试。"
        }
    },
    "entity": {
        "select":{
          "flush_cache": {
            "name": "清除 FakeIP 缓存"
          }
        },
        "sensor": {
          "up_speed": {
            "name": "上传速度"
          },
          "down_speed": {
            "name": "下载速度"
          },
          "up_traffic": {
            "name": "上传流量"
          },
          "down_traffic": {
            "name": "下载流量"
          },
          "memory_used": {
            "name": "内存占用"
          },
          "connection_sensor": {
            "name": "连接数"
          },
          "netflix_service": {
            "name": "Netflix",
            "state":{
                "unlocked": "已解锁",
                "blocked": "未解锁",
                "original_only": "仅限原创"
            },
            "state_attributes":{
                "latency": {
                    "name": "延迟"
                },
                "status_code": {
                    "name": "状态码"
                }
            }
          }
        }
    },
    "services": {
        "reboot_core_service": {
            "name": "重启 Clash 核心",
            "description": "重启远程 Clash 实例的核心。",
            "fields": {
                "device_id": {
                    "name": "实例",
                    "description": "选择目标实例"
                }
            }
        },
        "filter_connection_service": {
            "name": "筛选连接",
            "description": "使用关键字筛选活动连接，并可选择关闭连接。多个关键字请用逗号 \",\" 分隔。关键字不区分大小写。",
            "fields": {
                "device_id": {
                    "name": "实例",
                    "description": "选择目标实例"
                },
                "close_connection": {
                    "name": "关闭连接",
                    "description": "如果启用，筛选出的连接将被关闭"
                },
                "host": {
                    "name": "主机",
                    "description": "按主机筛选"
                },
                "src_hostname": {
                    "name": "源 IP",
                    "description": "按源 IP 筛选"
                },
                "des_hostname": {
                    "name": "目标 IP",
                    "description": "按目标 IP 筛选"
                }
            }
        },
        "get_latency_service": {
            "name": "获取延迟",
            "description": "获取指定节点或组的延迟，每次只能提供一个字段。如果 URL 配置错误或请求超时，可能会返回 504 错误。",
            "fields": {
                "device_id": {
                    "name": "实例",
                    "description": "选择目标实例"
                },
                "group": {
                    "name": "策略组名称",
                    "description": "策略组名称，获取策略组延迟将清除固定选项"
                },
                "node": {
                    "name": "节点名称",
                    "description": "代理节点名称"
                },
                "url": {
                    "name": "URL",
                    "description": "用于测试延迟的 URL"
                },
                "timeout": {
                    "name": "超时时间",
                    "description": "连接超时时间（毫秒）"
                }
            }
        },
        "dns_query_service": {
            "name": "DNS 查询",
            "description": "使用 Clash 进行 DNS 查询。",
            "fields": {
                "device_id": {
                    "name": "实例",
                    "description": "选择目标实例"
                },
                "domain_name": {
                    "name": "域名",
                    "description": "要查询的域名"
                },
                "record_type": {
                    "name": "记录类型",
                    "description": "要查询的记录类型，留空将获取 IPv4 (A) 记录"
                }
            }
        },
        "get_rule_service": {
            "name": "获取规则",
            "description": "使用关键字筛选规则。",
            "fields": {
                "device_id": {
                    "name": "实例",
                    "description": "选择目标实例"
                },
                "rule_type": {
                    "name": "类型",
                    "description": "规则的类型"
                },
                "rule_payload": {
                    "name": "匹配内容",
                    "description": "用于匹配的内容"
                },
                "rule_proxy": {
                    "name": "代理方式",
                    "description": "使用的代理方式"
                }
            }
        },
        "api_call_service": {
            "name": "API 调用",
            "description": "执行对 Clash 的通用 API 调用，并可选择性地获取响应。",
            "fields": {
                "device_id": {
                    "name": "实例",
                    "description": "选择目标实例"
                },
                "api_endpoint": {
                    "name": "接口",
                    "description": "要使用的 API 接口"
                },
                "api_method": {
                    "name": "请求方法",
                    "description": "HTTP 请求方法（GET、POST 等）"
                },
                "api_params": {
                    "name": "请求参数",
                    "description": "请求的查询参数，必须是有效的 JSON 字符串"
                },
                "api_data": {
                    "name": "载荷",
                    "description": "请求发送的 JSON 载荷，必须是有效的 JSON 字符串"
                },
                "read_line": {
                    "name": "读取行",
                    "description": "指示在分块响应中读取第 N 行"
                }
            }
        }        
    }
}
